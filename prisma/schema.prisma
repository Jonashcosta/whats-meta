// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//https://www.prisma.io/docs/concepts/database-connectors/mysql

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ProfileUser {
  id     Int     @id @default(autoincrement())
  bio    String? @db.Text
  userId Int     @unique(map: "userId")
  user   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Profile_1")
}

model Passwd {
  id     Int     @id @default(autoincrement())
  shadow String? @db.Text
  userId Int     @unique(map: "userId")
  user   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Shadow_1")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String?      @db.VarChar(255)
  email       String       @unique(map: "email") @db.VarChar(255)
  roleId      Int          @unique(map: "roleId")
  passwd      Passwd?
  profileUser ProfileUser?
  role        Role         @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Role_1")
}

model Role {
  id   Int    @id @default(autoincrement())
  role String @db.Text
  User User?
}

// meta 
model Webhook {
  id     BigInt  @id @unique @default(autoincrement()) @db.BigInt
  object String  @db.VarChar(255)
  entry  Entry[]
}

model Entry {
  id        BigInt    @id @unique @db.BigInt
  timestamp DateTime? @db.Timestamp()
  webhookId BigInt
  webhook   Webhook   @relation(fields: [webhookId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "1")
  changes   Changes[]
}

model Changes {
  id    BigInt  @id @unique @db.BigInt
  field String  @db.VarChar(255)
  value Value[]

  Entry   Entry?  @relation(fields: [entryId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "2")
  entryId BigInt? @db.BigInt
}

model Value {
  id                BigInt     @id @unique @db.BigInt
  messaging_product String     @db.VarChar(255)
  changes           Changes    @relation(fields: [changesId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "3")
  changesId         BigInt
  metadata          Metadata[]
  contacts          Contacts[]
  messages          Messages[]
  status            Status[]
}

model Metadata {
  id                   BigInt @id @unique @db.BigInt
  display_phone_number String @db.VarChar(255)
  phone_number_id      String @db.VarChar(255)
  value                Value  @relation(fields: [valueId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "4")
  valueId              BigInt
}

model Contacts {
  id      BigInt    @id @unique @db.BigInt
  wa_id   String    @db.VarChar(255)
  value   Value     @relation(fields: [valueId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "5")
  valueId BigInt
  profile Profile[]
}

model Profile {
  id         BigInt   @id @unique @db.BigInt
  name       String   @db.VarChar(255)
  contacts   Contacts @relation(fields: [contactsId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "6")
  contactsId BigInt
}

model Status {
  id      BigInt  @id @unique @db.BigInt
  Value   Value?  @relation(fields: [valueId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "7")
  valueId BigInt?

  Conversation Conversation[]
  pricing      Pricing[]
}

model Conversation {
  id       BigInt   @id @unique @db.BigInt
  Status   Status?  @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "8")
  statusId BigInt?  @db.BigInt
  origin   Origin[]
}

model Origin {
  id             BigInt        @id @unique @db.BigInt
  type           String
  Conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "9")
  conversationId BigInt?       @db.BigInt
}

model Pricing {
  id            BigInt  @id @unique @db.BigInt
  billable      Boolean
  pricing_model String
  category      String

  Status   Status? @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "10")
  statusId BigInt? @db.BigInt
}

model Messages {
  id        BigInt   @id @unique @db.BigInt
  from      String   @db.VarChar(255)
  timestamp DateTime @db.Timestamp()
  type      String   @db.VarChar(255)
  value     Value    @relation(fields: [valueId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "11")
  valueId   BigInt
  text      Text[]
}

model Text {
  id         BigInt   @id @unique @db.BigInt
  body       String   @db.Text
  messages   Messages @relation(fields: [messagesId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "12")
  messagesId BigInt
}
