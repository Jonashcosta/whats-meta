// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//https://www.prisma.io/docs/concepts/database-connectors/mysql

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ProfileUser {
  id     Int     @id @default(autoincrement())
  bio    String? @db.Text
  userId Int     @unique(map: "userId")
  user   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Profile_1")
}

model Passwd {
  id     Int     @id @default(autoincrement())
  shadow String? @db.Text
  userId Int     @unique(map: "userId")
  user   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Shadow_1")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String?      @db.VarChar(255)
  email       String       @unique(map: "email") @db.VarChar(255)
  roleId      Int          @unique(map: "roleId")
  passwd      Passwd?
  profileUser ProfileUser?
  role        Role         @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Role_1")
}

model Role {
  id   Int    @id @default(autoincrement())
  role String @db.Text
  User User?
}

// meta 
model Webhook {
  id     Int     @id @default(autoincrement())
  object String
  entry  Entry[]
}

model Entry {
  id      Int      @id
  changes Change[]
  time    Int?
  Webhook Webhook  @relation(fields: [id], references: [id])
}

model Change {
  id      Int    @id @default(autoincrement())
  value   String
  field   String
  Entry   Entry? @relation(fields: [entryId], references: [id])
  entryId Int?
}

// model Value {
//   messaging_product                MessagingProduct?
//   metadata                         Metadata?                @relation(fields: [], references: [])
//   contacts                         Contact[]
//   messages                         Message[]
//   decision                         String?
//   business_id                      Int?
//   event                            String?
//   previous_quality_score           String?
//   new_quality_score                String?
//   message_template_id              Int?
//   message_template_name            String?
//   message_template_language        MessageTemplateLanguage?
//   reason                           String?
//   display_phone_number             String?
//   requested_verified_name          String?
//   rejection_reason                 String?
//   previous_category                String?
//   new_category                     String?
//   statuses                         Status[]
//   entity_type                      String?
//   entity_id                        Int?
//   alert_severity                   String?
//   alert_status                     String?
//   alert_type                       String?
//   alert_description                String?
//   phone_number                     String?
//   campaign_id                      Int?
//   campaign_name                    String?
//   old_status                       String?
//   new_status                       String?
//   paused_reasons                   String[]
//   complete_reason                  String?
//   current_limit                    String?
//   max_daily_conversation_per_phone Int?
//   max_phone_numbers_per_business   Int?
//   requester                        String?
//   Change                           Change[]
// }

// model Contact {
//   id        Int     @id @default(autoincrement())
//   profile   Profile @relation(fields: [profileId], references: [id])
//   wa_id     String
//   Value     Value   @relation(fields: [], references: [])
//   profileId Int
// }

// model Profile {
//   id      Int       @id @default(autoincrement())
//   name    String
//   Contact Contact[]
// }

// model Message {
//   context     Context?     @relation(fields: [], references: [])
//   from        String
//   id          String
//   timestamp   String
//   type        String
//   interactive Interactive? @relation(fields: [], references: [])
//   image       Image?       @relation(fields: [imageId], references: [id])
//   text        Text?        @relation(fields: [], references: [])
//   audio       Audio?       @relation(fields: [audioId], references: [id])
//   Value       Value        @relation(fields: [], references: [])
//   imageId     String?
//   audioId     String?
// }

// model Image {
//   mime_type String
//   sha256    String
//   id        String    @id
//   Message   Message[]
// }

// model Audio {
//   mime_type String
//   sha256    String
//   id        String    @id
//   voice     Boolean?
//   Message   Message[]
// }

// model Context {
//   from    String
//   id      String
//   Message Message[]
// }

// model Interactive {
//   type        String
//   list_reply  ListReply @relation(fields: [listReplyId], references: [id])
//   Message     Message[]
//   listReplyId String
// }

// model ListReply {
//   id          String        @id
//   title       String
//   description String
//   Interactive Interactive[]
// }

// model Text {
//   body    String
//   Message Message[]
// }

// enum MessagingProduct {
//   Whatsapp
// }

// enum MessageTemplateLanguage {
//   EnUS
//   PtBR
// }

// model Metadata {
//   display_phone_number String
//   phone_number_id      String
//   Value                Value[]
// }

// model Status {
//   id             String        @id
//   status         String
//   timestamp      String
//   recipient_id   String
//   conversation   Conversation? @relation(fields: [conversationId], references: [id])
//   pricing        Pricing?      @relation(fields: [], references: [])
//   Value          Value         @relation(fields: [], references: [])
//   conversationId String?
// }

// model Conversation {
//   id                   String   @id
//   origin               Origin   @relation(fields: [], references: [])
//   expiration_timestamp String?
//   Status               Status[]
// }

// model Origin {
//   type         String
//   Conversation Conversation[]
// }

// model Pricing {
//   billable      Boolean
//   pricing_model String
//   category      String
//   Status        Status[]
// }
// // 
